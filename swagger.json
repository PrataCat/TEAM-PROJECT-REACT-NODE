{
  "openapi": "3.0.1",
  "info": {
    "name": "team-project-react-node",
    "version": "1.0.0",
    "description": "",
    "title": "Swagger test"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "http://localhost:4000" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Pets",
      "description": "Pets endpoints"
    },
    {
      "name": "News",
      "description": "News endpoint"
    }
  ],

  "paths": {
    "/api/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Email in use",
            "content": {}
          }
        }
      }
    },
    "/api/users/verify/:verificationToken": {
      "get": {
        "tags": ["Auth"],
        "summary": "User email verification",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "verificationToken",
            "type": "string",
            "description": "The verification token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailVereficationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/verify": {
      "post": {
        "tags": ["Auth"],
        "summary": "Resent verify email",
        "parameters": [],
        "requestBody": {
          "description": "Email's verefication object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResentEmailVereficationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResentEmailVereficationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Email or password is wrong  or  Email not verified",
            "content": {}
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "jwt expired",
            "content": {}
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Current User information",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "500": {
            "description": "jwt expired",
            "content": {}
          }
        }
      }
    },
    "/api/users/avatars": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user's avatar",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "content": {
            "image/png": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing 'avatar' field",
            "content": {}
          }
        }
      }
    },
    "/api/users/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user's information",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User's information (You can update any field you need)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          }
        }
      }
    },
    "/news": {
      "get": {
        "tags": ["News"],
        "summary": "Get news articles",
        "description": "Get all news",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "search news by keyword in the title",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "number of news articles per page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password", "confirmPassword"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          },
          "confirmPassword": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "$2b$10$sNqpv6Y4fkclZYoFyAJtnOXP80QOsOs3HQGsWx0WeMI2JsPPSvL02"
          },
          "message": {
            "type": "string",
            "example": "Your registration is success"
          }
        }
      },
      "EmailVereficationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Verification successful"
          }
        }
      },
      "ResentEmailVereficationRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "ResentEmailVereficationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Verification email sent"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "JWT"
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "AvatarRequest": {
        "content": {
          "image/png": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "AvatarResponse": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "description": "Avatar name"
          }
        }
      },
      "UserInfoRequest": {
        "type": "object",
        "required": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Petro"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+380500000000"
          },
          "birthday": {
            "type": "date",
            "description": "User's birthday",
            "example": "01.07.2000"
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Kyiv"
          }
        }
      },
      "UserInfoResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New user's name",
            "example": "Petro"
          },
          "email": {
            "type": "string",
            "description": "New user's email",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "New user's phone",
            "example": "+380500000000"
          },
          "birthday": {
            "type": "date",
            "description": "New user's birthday",
            "example": "01.07.2000"
          },
          "city": {
            "type": "string",
            "description": "New user's city",
            "example": "Kyiv"
          }
        }
      },
      "NewsResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "current page",
            "example": 1
          },
          "perPage": {
            "type": "integer",
            "description": "number of news articles per page",
            "example": 6
          },
          "totalPages": {
            "type": "integer",
            "description": "total pages",
            "example": 5
          },
          "news": {
            "type": "array",
            "items": {
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "id",
                  "example": "64ba71b318141666e961ba32"
                },
                "imgUrl": {
                  "type": "string",
                  "description": "image of article",
                  "example": "https://www.nytimes.com/images/2023/04/04/opinion/sunday/01Fine/01Fine-blog480.jpg"
                },
                "title": {
                  "type": "string",
                  "description": "title of article",
                  "example": "The Guilt of Putting Down Your Pet"
                },
                "text": {
                  "type": "string",
                  "description": "text of article",
                  "example": "Readers describe the decisions at the end of their pet’s lives..."
                },
                "date": {
                  "type": "string",
                  "description": "date of article",
                  "example": "2023-04-16T16:22:34+0000"
                },
                "url": {
                  "type": "string",
                  "description": "link of article",
                  "example": "https://www.nytimes.com/2023/04/16/opinion/letters/pets-euthanasia.html"
                }
              }
            }
          }
        },
        "securitySchemes": {
          "Bearer": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
          }
        }
      }
    }
  }
}
